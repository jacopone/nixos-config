#!/usr/bin/env bash
set -e



echo "Git working tree is clean. Starting update..."

# Update the flake inputs
echo "--> Updating flake inputs..."
nix flake update

# Perform a test build
echo "--> Performing a test build (without activating)..."
# Use 'build' instead of 'test' to get the path to the new configuration
# and avoid the 'Failed to start transient service unit' error if not root
NEW_CONFIG_PATH=$(NIXPKGS_ALLOW_UNFREE=1 nix build --no-link --print-out-paths --impure .#nixosConfigurations."nixos".config.system.build.toplevel)

echo "--> Test build successful. New configuration path: $NEW_CONFIG_PATH"

# Activate the new configuration
echo "--> Activating the new configuration..."
sudo NIXPKGS_ALLOW_UNFREE=1 nixos-rebuild switch --flake . --impure

# Update Claude Code configurations
echo "--> Updating Claude Code configurations..."

# Update system-level tool inventory (~/.claude/CLAUDE.md)
echo "    Updating system-level tool inventory..."
if (cd scripts && devenv shell python update-system-claude-v2.py); then
    echo "    ✅ System-level Claude configuration updated"
else
    echo "    ⚠️  Failed to update system-level Claude config (continuing anyway)"
fi

# Update project-level CLAUDE.md (./CLAUDE.md)
echo "    Updating project-level CLAUDE.md..."
if (cd scripts && devenv shell python update-project-claude-v2.py); then
    echo "    ✅ Project-level CLAUDE.md updated"
else
    echo "    ⚠️  Failed to update project-level CLAUDE.md (continuing anyway)"
fi

echo "✅ Claude Code configurations updated"

echo "--> Configuration activated. Please test the changes now."
read -p "Are you satisfied with the changes? (y/n) " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]
then
    echo "--> Changes accepted. Staging for commit..."
    git add . # Stage all changes

    git status # Show git status before prompting for commit message

    # Ask for a commit message
    read -p "Enter a commit message for these changes (or leave blank to skip commit): " commit_message

    if [ -n "$commit_message" ]; then
      echo "--> Committing changes..."
      git commit -m "$commit_message"
    else
      echo "--> No commit message provided. Skipping commit."
    fi
else
    echo "--> Changes rejected. Rolling back to previous configuration..."
    sudo nixos-rebuild switch --rollback
    echo "--> Rollback complete. Exiting."
    exit 0 # Exit successfully after rollback
fi

# Clean up old generations
echo "--> Listing system generations..."
sudo nixos-rebuild list-generations

read -p "Enter the generations you want to delete (separated by space): " generations_to_delete
if [ -n "$generations_to_delete" ]; then
    echo "--> Deleting generations: $generations_to_delete"
    sudo nix-env -p /nix/var/nix/profiles/system --delete-generations $generations_to_delete
    echo "--> Selected generations deleted."
    
    echo "--> Running garbage collection to free up disk space..."
    nix-collect-garbage
    echo "--> Garbage collection complete."
else
    echo "--> No generations selected for deletion."
fi

# Clean up cache directories
echo "--> Cache cleanup options..."
echo "Large cache directories detected:"
if [ -d ~/.cache/uv ]; then echo "  - UV Python cache: $(du -sh ~/.cache/uv 2>/dev/null | cut -f1)"; fi
if [ -d ~/.cache/google-chrome ]; then echo "  - Google Chrome cache: $(du -sh ~/.cache/google-chrome 2>/dev/null | cut -f1)"; fi
if [ -d ~/.cache/yarn ]; then echo "  - Yarn cache: $(du -sh ~/.cache/yarn 2>/dev/null | cut -f1)"; fi
if [ -d ~/.cache/ms-playwright ]; then echo "  - MS Playwright cache: $(du -sh ~/.cache/ms-playwright 2>/dev/null | cut -f1)"; fi
if [ -d ~/.cache/pnpm ]; then echo "  - PNPM cache: $(du -sh ~/.cache/pnpm 2>/dev/null | cut -f1)"; fi

read -p "Clean these cache directories? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "--> Cleaning cache directories..."
    [ -d ~/.cache/uv ] && echo "  Cleaning UV cache..." && rm -rf ~/.cache/uv
    [ -d ~/.cache/google-chrome ] && echo "  Cleaning Google Chrome cache..." && rm -rf ~/.cache/google-chrome
    [ -d ~/.cache/yarn ] && echo "  Cleaning Yarn cache..." && rm -rf ~/.cache/yarn
    [ -d ~/.cache/ms-playwright ] && echo "  Cleaning MS Playwright cache..." && rm -rf ~/.cache/ms-playwright
    [ -d ~/.cache/pnpm ] && echo "  Cleaning PNPM cache..." && rm -rf ~/.cache/pnpm
    [ -d ~/.cache/chromium ] && echo "  Cleaning Chromium cache..." && rm -rf ~/.cache/chromium
    echo "--> Cache cleanup complete."
else
    echo "--> Cache cleanup skipped."
fi

# Clean up old Claude backup files
if [ -d .backups ]; then
    backup_count=$(find .backups -name "*.backup-*" 2>/dev/null | wc -l)
    if [ "$backup_count" -gt 0 ]; then
        echo "--> Found $backup_count Claude backup files in .backups/"
        read -p "Delete Claude backup files older than 7 days? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "--> Cleaning old Claude backups..."
            find .backups -name "*.backup-*" -mtime +7 -delete 2>/dev/null && echo "  ✅ Old backups deleted"
        else
            echo "--> Claude backup cleanup skipped."
        fi
    fi
fi

echo ""
echo "NixOS system rebuild and cleanup complete!"

read -p "Do you want to push the changes? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
    git push
fi