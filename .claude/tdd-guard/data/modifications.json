{
  "session_id": "921a795f-2991-413f-a7bc-03c2cdfc4112",
  "transcript_path": "/home/guyfawkes/.claude/projects/-home-guyfawkes-nixos-config/921a795f-2991-413f-a7bc-03c2cdfc4112.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/home/guyfawkes/birthday-manager/src/database.py",
    "content": "\"\"\"Database models and operations for birthday manager.\"\"\"\n\nimport os\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List, Optional\n\nfrom sqlalchemy import (\n    Column,\n    String,\n    Integer,\n    Date,\n    DateTime,\n    Boolean,\n    create_engine,\n)\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\n\nclass Event(Base):\n    \"\"\"Event model for birthdays and anniversaries.\"\"\"\n\n    __tablename__ = \"events\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    event_type = Column(String, nullable=False)\n    date = Column(Date, nullable=False)\n    month = Column(Integer, nullable=False)\n    day = Column(Integer, nullable=False)\n    emoji = Column(String, default=\"ðŸŽ‚\")\n    source = Column(String, nullable=False)\n    source_id = Column(String)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n\nclass NotificationLog(Base):\n    \"\"\"Track which notifications have been sent.\"\"\"\n\n    __tablename__ = \"notification_log\"\n\n    id = Column(Integer, primary_key=True)\n    event_id = Column(Integer, nullable=False)\n    year = Column(Integer, nullable=False)\n    days_before = Column(Integer, nullable=False)\n    notified_at = Column(DateTime, default=datetime.utcnow)\n\n\nclass Database:\n    \"\"\"Database manager for birthday events.\"\"\"\n\n    def __init__(self, db_path: Optional[str] = None):\n        \"\"\"Initialize database connection.\"\"\"\n        if db_path is None:\n            db_path = os.getenv(\"BIRTHDAY_MANAGER_DATA\", str(Path.home() / \".local/share/birthday-manager\"))\n            db_path = Path(db_path) / \"events.db\"\n        else:\n            db_path = Path(db_path)\n\n        db_path.parent.mkdir(parents=True, exist_ok=True)\n        self.engine = create_engine(f\"sqlite:///{db_path}\")\n        Base.metadata.create_all(self.engine)\n        self.Session = sessionmaker(bind=self.engine)\n\n    def get_session(self):\n        return self.Session()\n\n    def add_event(self, name: str, event_type: str, date: datetime, emoji: str = \"ðŸŽ‚\", source: str = \"custom\", source_id: Optional[str] = None):\n        session = self.get_session()\n        try:\n            event = Event(\n                name=name,\n                event_type=event_type,\n                date=date.date() if isinstance(date, datetime) else date,\n                month=date.month,\n                day=date.day,\n                emoji=emoji,\n                source=source,\n                source_id=source_id,\n            )\n            session.add(event)\n            session.commit()\n            session.refresh(event)\n            return event\n        finally:\n            session.close()\n\n    def get_all_events(self) -> List[Event]:\n        session = self.get_session()\n        try:\n            return session.query(Event).all()\n        finally:\n            session.close()\n\n    def has_been_notified(self, event_id: int, year: int, days_before: int) -> bool:\n        session = self.get_session()\n        try:\n            log = session.query(NotificationLog).filter(\n                NotificationLog.event_id == event_id,\n                NotificationLog.year == year,\n                NotificationLog.days_before == days_before,\n            ).first()\n            return log is not None\n        finally:\n            session.close()\n\n    def mark_notified(self, event_id: int, year: int, days_before: int):\n        session = self.get_session()\n        try:\n            log = NotificationLog(event_id=event_id, year=year, days_before=days_before)\n            session.add(log)\n            session.commit()\n        finally:\n            session.close()\n"
  }
}