#!/usr/bin/env bash

# CCPM Integration Bridge Script
# Connects CCPM project management with Universal AI Orchestration System
# Version: 1.0.0

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${PURPLE}🌉 CCPM Integration Bridge v1.0.0${NC}"
echo -e "${PURPLE}==============================================${NC}"
echo ""

# Get script directory (works even when sourced)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
AI_ORCHESTRATION_ROOT="$(dirname "$SCRIPT_DIR")"
PROJECT_DIR="$(pwd)"

# Function to check if we're in a project directory
check_project_context() {
    if [[ "$PROJECT_DIR" == "$AI_ORCHESTRATION_ROOT"* ]]; then
        echo -e "${RED}❌ Error: Cannot run from ai-orchestration directory${NC}"
        echo -e "${YELLOW}Please run this from your actual project directory${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ Project context: $(basename "$PROJECT_DIR")${NC}"
}

# Function to initialize CCPM structure in project
init_ccpm_structure() {
    local project_dir="$1"
    
    echo -e "${BLUE}🏗️  Initializing CCPM structure in project...${NC}"
    
    # Create .claude directory if it doesn't exist
    if [[ ! -d "$project_dir/.claude" ]]; then
        cp -r "$SCRIPT_DIR/.claude" "$project_dir/"
        echo -e "${GREEN}✅ Created .claude directory structure${NC}"
    else
        echo -e "${YELLOW}⚠️  .claude directory already exists, merging...${NC}"
        # Merge existing structure
        for dir in agents commands context epics prds rules scripts; do
            if [[ ! -d "$project_dir/.claude/$dir" ]]; then
                cp -r "$SCRIPT_DIR/.claude/$dir" "$project_dir/.claude/"
                echo -e "${GREEN}   ✅ Added $dir directory${NC}"
            fi
        done
    fi
    
    # Customize CLAUDE.md for the project
    local project_name=$(basename "$project_dir")
    if [[ ! -f "$project_dir/.claude/CLAUDE.md" ]]; then
        cat > "$project_dir/.claude/CLAUDE.md" << EOF
# $project_name - CCPM Integration

This project uses CCPM (Claude Code Project Management) integrated with Universal AI Orchestration System.

## Project Context
- **Project**: $project_name
- **Management**: CCPM with GitHub Issues integration
- **Orchestration**: Multi-agent AI coordination
- **Structure**: Spec-driven development with parallel execution

## Workflow
1. **Product Planning** - Create PRD in .claude/prds/
2. **Implementation Planning** - Convert to technical epic
3. **Task Decomposition** - Break down into GitHub Issues
4. **Orchestrated Execution** - Multi-agent parallel development
5. **Integration & Testing** - Quality assurance and synthesis

## Available Commands
Run from project root:
- \`~/nixos-config/ai-orchestration/ccpm/ccpm-bridge.sh\` - This bridge script
- \`~/nixos-config/ai-orchestration/scripts/ai-orchestration-universal.sh\` - AI Orchestration
- Combined workflows coming in Phase 2

## Structure
\`\`\`
.claude/
├── agents/       # Agent-specific contexts and instructions
├── commands/     # Custom commands and workflows
├── context/      # Project context and requirements
├── epics/        # Technical epics from PRDs
├── prds/         # Product Requirements Documents
├── rules/        # Development rules and constraints  
└── scripts/      # Automation scripts
\`\`\`

Generated by CCPM Integration Bridge v1.0.0
EOF
        echo -e "${GREEN}✅ Created project-specific CLAUDE.md${NC}"
    fi
}

# Function to show available workflows
show_workflows() {
    echo -e "${BLUE}📋 Available Workflows:${NC}"
    echo ""
    echo -e "${GREEN}1. CCPM Workflow${NC}"
    echo "   - Spec-driven development with GitHub Issues"
    echo "   - Git worktrees for parallel execution"
    echo "   - Full traceability from PRD to code"
    echo ""
    echo -e "${GREEN}2. Universal AI Orchestration${NC}"
    echo "   - Dynamic multi-platform agent coordination"
    echo "   - Real-time adaptive strategy"
    echo "   - Cross-platform integration (Claude/Cursor/v0.dev/Gemini)"
    echo ""
    echo -e "${GREEN}3. Hybrid Workflow (Coming in Phase 2)${NC}"
    echo "   - Combined CCPM structure + AI Orchestration"
    echo "   - GitHub Issues + Multi-agent execution"
    echo "   - Spec-driven + Adaptive intelligence"
    echo ""
}

# Function to run CCPM workflow
run_ccpm() {
    echo -e "${BLUE}🚀 Starting CCPM Workflow...${NC}"
    echo -e "${YELLOW}Note: Full CCPM commands will be integrated in Phase 2${NC}"
    echo -e "${YELLOW}For now, use the .claude structure for manual CCPM workflow${NC}"
    echo ""
    echo -e "${GREEN}Quick Start:${NC}"
    echo "1. Create PRD in .claude/prds/"
    echo "2. Convert to epic in .claude/epics/"
    echo "3. Break down tasks for GitHub Issues"
    echo "4. Use Git worktrees for parallel execution"
}

# Function to run AI Orchestration
run_orchestration() {
    echo -e "${BLUE}🤖 Starting Universal AI Orchestration...${NC}"
    "$AI_ORCHESTRATION_ROOT/scripts/ai-orchestration-universal.sh"
}

# Main execution
main() {
    check_project_context
    init_ccpm_structure "$PROJECT_DIR"
    
    echo ""
    show_workflows
    
    echo ""
    echo -e "${YELLOW}Choose workflow:${NC}"
    echo "1) CCPM Workflow"
    echo "2) Universal AI Orchestration"  
    echo "3) Show this help again"
    echo "4) Exit"
    echo ""
    
    read -p "Enter choice [1-4]: " choice
    
    case $choice in
        1)
            run_ccpm
            ;;
        2)
            run_orchestration
            ;;
        3)
            show_workflows
            ;;
        4)
            echo -e "${GREEN}👋 Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}❌ Invalid choice${NC}"
            exit 1
            ;;
    esac
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi